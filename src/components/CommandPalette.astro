---
import { SITE } from "@consts";
---
<div id="cmdpalette-root" class="z-50">
  <!-- Trigger -->
  <button
    id="cmdpalette-btn"
    type="button"
    class="fixed top-14 left-14 z-50 w-12 h-12 rounded-lg border bg-black/5 dark:bg-white/5 border-black/15 dark:border-white/20 flex items-center justify-center text-s font-medium backdrop-blur-sm"
    aria-haspopup="dialog"
    aria-expanded="false"
    title="Open quick menu (Ctrl+K)"
  >
  <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M8 8v8m0-8h8M8 8H6a2 2 0 1 1 2-2v2Zm0 8h8m-8 0H6a2 2 0 1 0 2 2v-2Zm8 0V8m0 8h2a2 2 0 1 1-2 2v-2Zm0-8h2a2 2 0 1 0-2-2v2Z"/>
  </svg>
  </button>
  <!-- Overlay + Modal -->
  <div
    id="cmdpalette-overlay"
    class="fixed inset-0 z-40 hidden flex items-center justify-center bg-black/40 backdrop-blur-sm p-6"
    aria-hidden="true"
  >
    <div
      role="dialog"
      aria-modal="true"
      aria-labelledby="cmdpalette-title"
      class="mx-auto w-full max-w-md rounded-3xl bg-paper dark:bg-charcoal text-black dark:text-white overflow-hidden transform transition-all duration-200"
      style="backdrop-filter: blur(6px);"
    >
      <!-- Header -->
      <div class="flex items-center justify-between px-6 py-4 border-b border-gray-100 dark:border-gray-200/20">
        <div id="cmdpalette-time" class="text-sm"></div>
        <button
          id="cmdpalette-toggle-theme"
          class="text-sm cp-accent hover:bg-violet-300/40 dark:hover:bg-violet-400/40 rounded-md px-2 py-1 transition"
          type="button"
        >
          Lights off
        </button>
      </div>
      <!-- List -->
      <div class="px-6 py-4">
        <h4 class="text-sm text-gray-500 dark:text-gray-400 mb-2">Pages</h4>
        <ul id="cmdpalette-list" class="space-y-2">
          <li>
            <a href="/" class="flex items-center gap-3 px-3 py-2 rounded-lg hover:bg-violet-300/40 dark:hover:bg-violet-400/40 text-sm">
              <svg class="w-5 h-5 text-gray-600 dark:text-gray-300" viewBox="0 0 24 24" fill="none" aria-hidden><path d="M3 10.5L12 4l9 6.5V20a1 1 0 0 1-1 1h-5v-6H9v6H4a1 1 0 0 1-1-1V10.5z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>
              
              <span>Home</span>
            </a>
          </li>
          <li>
            <a href="/blog" class="flex items-center gap-3 px-3 py-2 rounded-lg hover:bg-violet-300/40 dark:hover:bg-violet-400/40 text-sm">
              <svg class="w-5 h-5 text-gray-600 dark:text-gray-300" viewBox="0 0 24 24" fill="none" aria-hidden><path d="M18 5V4a1 1 0 0 0-1-1H8.914a1 1 0 0 0-.707.293L4.293 7.207A1 1 0 0 0 4 7.914V20a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-5M9 3v4a1 1 0 0 1-1 1H4m11.383.772 2.745 2.746m1.215-3.906a2.089 2.089 0 0 1 0 2.953l-6.65 6.646L9 17.95l.739-3.692 6.646-6.646a2.087 2.087 0 0 1 2.958 0Z" stroke="currentColor" stroke-width="1.5"/></svg>
              <span>Posts</span>
            </a>
          </li>
          <li>
              <a href="/projects" class="flex items-center gap-3 px-3 py-2 rounded-lg hover:bg-violet-300/40 dark:hover:bg-violet-400/40 text-sm">
              <svg class="w-5 h-5 text-gray-600 dark:text-gray-300" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m8 8-4 4 4 4m8 0 4-4-4-4m-2-3-4 14"/></svg>
              <span>Projects</span>
            </a>
          </li>
          <li>
            <a href="/work" class="flex items-center gap-3 px-3 py-2 rounded-lg hover:bg-violet-300/40 dark:hover:bg-violet-400/40 text-sm">
              <svg class="w-5 h-5 text-gray-600 dark:text-gray-300" viewBox="0 0 24 24" fill="none" aria-hidden><path stroke="currentColor" stroke-linejoin="round" stroke-width="2" d="m20.9532 11.7634-2.0523-2.05225-2.0523 2.05225 2.0523 2.0523 2.0523-2.0523Zm-1.3681-2.73651-4.1046-4.10457L12.06 8.3428l4.1046 4.1046 3.4205-3.42051Zm-4.1047 2.73651-2.7363-2.73638-8.20919 8.20918 2.73639 2.7364 8.2091-8.2092Z"/><path stroke="currentColor" stroke-linejoin="round" stroke-width="2" d="m12.9306 3.74083 1.8658 1.86571-2.0523 2.05229-1.5548-1.55476c-.995-.99505-3.23389-.49753-3.91799.18657l2.73639-2.73639c.6841-.68409 1.9901-.74628 2.9229.18658Z"/></svg>
              <span>Work</span>
            </a>
          </li>
          <li>
            <a href="/bookshelf" class="flex items-center gap-3 px-3 py-2 rounded-lg hover:bg-violet-300/40 dark:hover:bg-violet-400/40 text-sm">
              <svg class="w-5 h-5 text-gray-600 dark:text-gray-300" viewBox="0 0 24 24" fill="none" aria-hidden><path d="M5 19V4a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v13H7a2 2 0 0 0-2 2Zm0 0a2 2 0 0 0 2 2h12M9 3v14m7 0v4" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>
              <span>Bookshelf</span>
            </a>
          </li>
          <li class="pt-4">
            <h4 class="text-sm text-gray-500 dark:text-gray-400 mb-2">Info</h4>
            <ul class="space-y-2">
              <li>
                <a href="/colophon" class="flex items-center gap-3 px-3 py-2 rounded-lg hover:bg-violet-300/40 dark:hover:bg-violet-400/40 text-sm">
                  <svg class="w-5 h-5 text-gray-600 dark:text-gray-300" viewBox="0 0 24 24" fill="none" aria-hidden><path d="M7.58209 8.96025 9.8136 11.1917l-1.61782 1.6178c-1.08305-.1811-2.23623.1454-3.07364.9828-1.1208 1.1208-1.32697 2.8069-.62368 4.1363.14842.2806.42122.474.73509.5213.06726.0101.1347.0133.20136.0098-.00351.0666-.00036.1341.00977.2013.04724.3139.24069.5867.52125.7351 1.32944.7033 3.01552.4971 4.13627-.6237.8375-.8374 1.1639-1.9906.9829-3.0736l4.8107-4.8108c1.0831.1811 2.2363-.1454 3.0737-.9828 1.1208-1.1208 1.3269-2.80688.6237-4.13632-.1485-.28056-.4213-.474-.7351-.52125-.0673-.01012-.1347-.01327-.2014-.00977.0035-.06666.0004-.13409-.0098-.20136-.0472-.31386-.2406-.58666-.5212-.73508-1.3294-.70329-3.0155-.49713-4.1363.62367-.8374.83741-1.1639 1.9906-.9828 3.07365l-1.7788 1.77875-2.23152-2.23148-1.41419 1.41424Zm1.31056-3.1394c-.04235-.32684-.24303-.61183-.53647-.76186l-1.98183-1.0133c-.38619-.19746-.85564-.12345-1.16234.18326l-.86321.8632c-.3067.3067-.38072.77616-.18326 1.16235l1.0133 1.98182c.15004.29345.43503.49412.76187.53647l1.1127.14418c.3076.03985.61628-.06528.8356-.28461l.86321-.8632c.21932-.21932.32446-.52801.2846-.83561l-.14417-1.1127ZM19.4448 16.4052l-3.1186-3.1187c-.7811-.781-2.0474-.781-2.8285 0l-.1719.172c-.7811.781-.7811 2.0474 0 2.8284l3.1186 3.1187c.7811.781 2.0474.781 2.8285 0l.1719-.172c.7811-.781.7811-2.0474 0-2.8284Z" stroke="currentColor" stroke-width="1.5"/></svg>
                  <span>Colophon</span>
                </a>
              </li>
              <li>
                <a href="/now" class="flex items-center gap-3 px-3 py-2 rounded-lg hover:bg-violet-300/40 dark:hover:bg-violet-400/40 text-sm">
                  <svg class="w-5 h-5 text-gray-600 dark:text-gray-300" viewBox="0 0 24 24" fill="none" aria-hidden><path d="M12 8v4l3 3m6-3a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>
                  <span>Now</span>
                </a>
              </li>
            </ul>
          </li>
        </ul>
      </div>
      <!-- Footer -->
      <div class="flex items-center justify-between px-6 py-4 bg-gray-300/20 dark:bg-gray-100/20 border-t border-gray-100 dark:border-gray-800 text-sm">
        <a href={`mailto:${SITE.EMAIL}`} class="text-sm text-gray-600 dark:text-gray-300 truncate">{SITE.EMAIL}</a>
        <div class="flex items-center gap-3 text-gray-600 dark:text-gray-400">
          <span class="text-xs">Close</span>
          <kbd class="px-2 py-1 rounded bg-white/70 dark:bg-gray-900/60 text-xs border border-gray-200 dark:border-gray-100">ESC</kbd>
        </div>
      </div>
    </div>
  </div>
</div>
<!-- local styling to pick up blog accent color if provided -->
<style>
  :root {
    --site-accent: ${SITE?.ACCENT ?? '#863bf6ff'};
  }
  .cp-accent { color: var(--site-accent); }
  .cp-accent:focus, .cp-accent:active { outline: none; }
</style>
<script type="module">
  // Use a namespace to avoid global conflicts and manage state properly
  window.CommandPalette = window.CommandPalette || {};
  
  (function () {
    // Clean up any existing instance
    if (window.CommandPalette.cleanup) {
      window.CommandPalette.cleanup();
    }
    
    // Store references and state
    const state = {
      timeInterval: null,
      listeners: new Map(),
      abortController: null
    };
    
    function initCommandPalette() {
      const btn = document.getElementById('cmdpalette-btn');
      const overlay = document.getElementById('cmdpalette-overlay');
      const list = document.getElementById('cmdpalette-list');
      const timeEl = document.getElementById('cmdpalette-time');
      const toggleBtn = document.getElementById('cmdpalette-toggle-theme');
      const root = document.getElementById('cmdpalette-root');
      const darkBtn = document.getElementById('dark-theme-button');
      const lightBtn = document.getElementById('light-theme-button');
      const allowedHosts = Array.isArray(window.__SITE__?.ALLOWED_HOSTS) ? window.__SITE__.ALLOWED_HOSTS : [];
      
      if (!btn || !overlay || !list || !root) {
        console.warn('CommandPalette: missing required elements');
        return;
      }
      
      // Create AbortController for easy cleanup
      state.abortController = new AbortController();
      const signal = state.abortController.signal;
      
      function isSafeUrl(href) {
        if (!href || typeof href !== 'string') return false;
        if (href.startsWith('/')) return true;
        if (href.startsWith('mailto:') || href.startsWith('tel:')) return true;
        try {
          const parsed = new URL(href, location.origin);
          if (parsed.origin === location.origin) return true;
          if (allowedHosts.includes(parsed.hostname) || allowedHosts.includes(parsed.host)) return true;
          return false;
        } catch (e) {
          return false;
        }
      }
      
      function safeNavigate(href, target) {
        if (!isSafeUrl(href)) {
          console.warn('Blocked navigation to unsafe URL:', href);
          return;
        }
        if (target === '_blank') window.open(href, '_blank', 'noopener');
        else window.location.assign(href);
      }
      
      function updatePisaTime() {
        try {
          const now = new Date();
          const opts = { hour: 'numeric', minute: '2-digit', hour12: true, timeZone: 'Europe/Rome' };
          const formatted = new Intl.DateTimeFormat(undefined, opts).format(now);
          if (timeEl) timeEl.textContent = `Pisa, ${formatted}`;
        } catch (e) {
          if (timeEl) timeEl.textContent = 'Pisa';
        }
      }
      
      function getLinks() {
        if (!list) return [];
        return Array.from(list.querySelectorAll('a[href]'));
      }
      
      function setActiveByIndex(idx) {
        const links = getLinks();
        if (!links.length) return;
        const clamped = ((idx % links.length) + links.length) % links.length;
        links.forEach(l => l.classList.remove('cmd-active'));
        links[clamped].classList.add('cmd-active');
        links[clamped].focus();
      }
      
      function isDarkMode() {
        return document.documentElement.classList.contains('dark') || localStorage.getItem('theme') === 'dark';
      }
      
      function updateToggleLabel() {
        if (!toggleBtn) return;
        toggleBtn.textContent = isDarkMode() ? 'Lights on' : 'Lights off';
      }
      
      function toggleTheme() {
        if (isDarkMode()) {
          if (lightBtn) {
            lightBtn.click();
          } else {
            document.documentElement.classList.remove('dark');
            localStorage.setItem('theme', 'light');
          }
        } else {
          if (darkBtn) {
            darkBtn.click();
          } else {
            document.documentElement.classList.add('dark');
            localStorage.setItem('theme', 'dark');
          }
        }
        setTimeout(updateToggleLabel, 50);
      }
      
      function focusFirstLink() {
        const links = list.querySelectorAll('a[href]');
        if (links.length) {
          links[0].focus();
          links.forEach(l => l.classList.remove('cmd-active'));
          links[0].classList.add('cmd-active');
        }
      }
      
      function openModal() {
        updatePisaTime();
        if (state.timeInterval) clearInterval(state.timeInterval);
        state.timeInterval = setInterval(updatePisaTime, 60000);
        overlay.classList.remove('hidden');
        overlay.setAttribute('aria-hidden', 'false');
        btn.setAttribute('aria-expanded', 'true');
        document.documentElement.style.overflow = 'hidden';
        focusFirstLink();
        updateToggleLabel();
      }
      
      function closeModal() {
        if (state.timeInterval) { 
          clearInterval(state.timeInterval); 
          state.timeInterval = null; 
        }
        overlay.classList.add('hidden');
        overlay.setAttribute('aria-hidden', 'true');
        btn.setAttribute('aria-expanded', 'false');
        document.documentElement.style.overflow = '';
        btn.focus();
        if (list) {
          Array.from(list.querySelectorAll('.cmd-active')).forEach(l => l.classList.remove('cmd-active'));
        }
      }
      
      function resetModalState() {
        if (!overlay || !btn || !list) return;
        overlay.classList.add('hidden');
        overlay.setAttribute('aria-hidden', 'true');
        btn.setAttribute('aria-expanded', 'false');
        document.documentElement.style.overflow = '';
        if (list) {
          Array.from(list.querySelectorAll('.cmd-active')).forEach(l => l.classList.remove('cmd-active'));
        }
      }
      
      // Event handlers
      const handleBtnClick = (e) => {
        const isOpen = btn.getAttribute('aria-expanded') === 'true';
        if (isOpen) closeModal(); else openModal();
      };
      
      const handleToggleClick = (e) => {
        e.preventDefault();
        toggleTheme();
      };
      
      const handleKeydown = (e) => {
        const tag = document.activeElement?.tagName;
        const isEditable = document.activeElement?.isContentEditable;
        
        if (tag === 'INPUT' || tag === 'TEXTAREA' || isEditable) {
          return;
        }
        
        if ((e.ctrlKey || e.metaKey) && e.key.toLowerCase() === 'k') {
          e.preventDefault();
          const isOpen = btn?.getAttribute('aria-expanded') === 'true';
          if (isOpen) closeModal(); else openModal();
          return;
        }
        
        if (!overlay || overlay.classList.contains('hidden')) return;
        
        if (e.key === 'Escape') {
          e.preventDefault();
          closeModal();
          return;
        }
        
        const links = getLinks();
        if (!links.length) return;
        
        if (e.key === 'ArrowDown') {
          e.preventDefault();
          const idx = links.indexOf(document.activeElement);
          setActiveByIndex(idx + 1);
          return;
        }
        
        if (e.key === 'ArrowUp') {
          e.preventDefault();
          const idx = links.indexOf(document.activeElement);
          setActiveByIndex(idx - 1);
          return;
        }
        
        if (e.key === 'Enter') {
          const active = document.activeElement;
          if (active && active.tagName === 'A') {
            e.preventDefault();
            const href = active.getAttribute('href');
            const target = active.getAttribute('target');
            if (isSafeUrl(href)) {
              safeNavigate(href, target);
              closeModal();
            } else {
              console.warn('Blocked unsafe anchor via Enter:', href);
            }
          }
        }
      };
      
      const handleRootClick = (evt) => {
        const a = evt.target.closest('a');
        if (!a || !root.contains(a)) return;
        
        const links = getLinks();
        links.forEach((l) => l.classList.remove('cmd-active'));
        if (a) a.classList.add('cmd-active');
        
        const href = a.getAttribute('href');
        const target = a.getAttribute('target');
        
        if (!isSafeUrl(href)) {
          evt.preventDefault();
          console.warn('Blocked unsafe anchor:', href);
          return;
        }
        
        if (!target || target === '_self') {
          evt.preventDefault();
          safeNavigate(href, target);
          closeModal();
        }
      };
      
      const handleOverlayClick = (e) => {
        if (e.target === overlay) closeModal();
      };
      
      const handleFocusin = (e) => {
        if (!overlay || overlay.classList.contains('hidden')) return;
        if (!overlay.contains(e.target)) {
          const first = list?.querySelector('a');
          if (first) first.focus();
        }
      };
      
      const handleThemeButtonClick = () => setTimeout(updateToggleLabel, 50);
      
      // Attach event listeners with signal for easy cleanup
      btn.addEventListener('click', handleBtnClick, { signal });
      if (toggleBtn) {
        toggleBtn.addEventListener('click', handleToggleClick, { signal });
      }
      
      [darkBtn, lightBtn].forEach((b) => {
        if (b) b.addEventListener('click', handleThemeButtonClick, { signal });
      });
      
      window.addEventListener('keydown', handleKeydown, { signal });
      root.addEventListener('click', handleRootClick, { signal });
      overlay.addEventListener('click', handleOverlayClick, { signal });
      document.addEventListener('focusin', handleFocusin, { signal });
      window.addEventListener('pageshow', resetModalState, { signal });
      document.addEventListener('astro:after-swap', resetModalState, { signal });
      
      // Initial setup
      resetModalState();
      updateToggleLabel();
    }
    
    // Cleanup function
    window.CommandPalette.cleanup = function() {
      if (state.timeInterval) {
        clearInterval(state.timeInterval);
        state.timeInterval = null;
      }
      if (state.abortController) {
        state.abortController.abort();
        state.abortController = null;
      }
    };
    
    // Initialize immediately
    initCommandPalette();
    
    // Re-initialize after Astro swaps
    document.addEventListener('astro:after-swap', () => {
      // Small delay to ensure DOM is ready
      setTimeout(() => {
        if (window.CommandPalette.cleanup) {
          window.CommandPalette.cleanup();
        }
        initCommandPalette();
      }, 10);
    });
    
    // Cleanup on page unload
    window.addEventListener('beforeunload', () => {
      if (window.CommandPalette.cleanup) {
        window.CommandPalette.cleanup();
      }
    });
  })();
</script>